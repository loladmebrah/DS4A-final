/// <reference types="react" />
import { OverridableProps } from "../Base/OverridableProps";
/**
 * Converts hex number in string representation to decimal number
 *
 *
 * @param letter the string hex number
 * @returns a decimal number
 */
export declare const hexTodec: (letter: string) => number;
/**
 * Validates wheteher the color is hexadecimal css color
 * Example:  #FF56AC
 *
 *
 * @param colorInput the color inpt to test
 * @returns true if the inputColor is a hexadecimal css color
 */
export declare const isHexColor: (colorInput: string) => boolean;
/**
 * In order to managae rgba() we convert hex colors into rgba()
 * If the given color is already a rgb() color, it can add the percentage to convert it into rgba()
 *
 *
 * @param colorInput color in hex or in rgb
 * @param perc percentage for RGBA() color
 * @returns the rgba representation of a hex color
 */
export declare const hexColorToRGB: (colorInput: string | undefined, perc?: number, defaultColor?: string) => string;
/**
 * Make the color into a darker color
 * @param colorInput
 * @returns the darked color in
 */
export declare const darkerColor: (colorInput: string, percentage?: number) => string;
/**
 * Make the color into a brighted color
 * @param colorInput
 * @returns the brighted color
 */
export declare const brighterColor: (colorInput: string, percentage?: number) => string;
/**
 * Adds a boxshadow property
 *
 * @param style CSS style
 * @returns the style with the box shadow propertie altered
 */
export declare const addBoxShadow: Function;
/**
 * Adds a boxshadow property ina classname css
 *
 * @param style CSS style
 * @returns the style with the box shadow propertie altered
 */
export declare const addMaterialBoxShadowCSS: Function;
/**
 * Merge props that com form user and those ones that are default
 * if incommingStyle is null this returns teh default value
 *
 * @param incommingProps prop that comes from props attributoo of a React Node
 * @param defaultProps default prop defined for that  React Node
 * @returns merged props
 */
export declare function mergeProps<T extends OverridableProps>(incommingProps: T | undefined, defaultProps: T): T;
/**
 * Asure a base colour when not given or when given an incorrect color format
 * default color is this kind of grey #5d6475
 *
 * @param color param color given by user
 * @returns returns the same color
 */
export declare const asureColor: (color?: string) => string;
/**
 * Insert style 1.0.0 (experimental)
 *
 * Inserts the given style into the document
 * @param css the scc styles built
 * @returns the style added
 */
export declare function insertStyle(css: string): string;
/**
 * Makestyles 1.0.0 (experimental for now)
 *
 * Makes a class css style and inserts it into the document
 *
 * To avoid multiple rendering creates an undefined number of css injections
 * it is necessary 3 things:
 *          - useState in the component for every makeStyle call
 *          - static numbering to avoid overwrittings and be able to get different styles at the same time
 *          - useState for the result className for the component
 *
 * @param className the class name for the styles
 * @param styles the actual styles to include
 * @returns the style created and added
 */
export declare function makeStyle(className: string, styles: string): string;
/**
 * Interface to describe a named color
 */
export interface namedColor {
    [colorName: string]: string;
}
/**
 * Converts a named color into hexadecimal color
 * from a list of well known namd colors if found.
 * When not given returns a ""
 * When not found in the list, returns the same value given
 * @param colour the named color
 * @returns The hex representation of the color or "" or the same color
 */
export declare function colourNameToHex(colour: string | undefined): string;
/**
 * @deprecated
 * List of named colors taken from stackoverflow
 */
export declare const namedColours: namedColor;
/**
 * The full list of named Colors provided by
 * https://htmlcolorcodes.com/es/nombres-de-los-colores/
 */
export declare const namedColours2: namedColor;
export interface UnlimitedReactComponentRootProps {
    style?: React.CSSProperties;
    children?: React.ReactNode | string;
}
export declare const createDPF: () => File;
export declare const createWord: () => File;
export declare const createListOfDPF: (size?: number) => File[];
/**
 * Gives a XX.XX format in Bytes KB,MB,GB
 * @param fileSize file size to give format in Bytes
 */
export declare const sizeFormat: (fileSize: number) => string;
export declare const getExt: (fileName: string) => string;
